/***
 * Clash Verge Rev 全局扩展脚本（懒人配置）/ Mihomo Party 覆写脚本
 * 基于那帅哥的改的，链接删了忘了，有空再补
 */

/**
 * 整个脚本的总开关，在Mihomo Party使用的话，请保持为true
 * true = 启用
 * false = 禁用
 */
// ============================= Section 1: 总开关 =============================
const enable = true

/**
 * 分流规则配置，会自动生成对应的策略组
 * 设置的时候可遵循“最小，可用”原则，把自己不需要的规则全禁用掉，提高效率
 * true = 启用
 * false = 禁用
 */
// ======================= Section 2: 规则开关（最小可用优先） =======================
// 逐项启用/关闭各场景策略组，保持默认即为“最小可用”。
const ruleOptions = {
  apple: true,         // 苹果服务
  microsoft: true,     // 微软服务
  github: true,        // Github服务
  google: true,        // Google服务
  openai: true,        // 国外AI和GPT
  spotify: false,      // Spotify
  youtube: true,       // YouTube
  bahamut: false,      // 巴哈姆特/动画疯
  netflix: false,      // Netflix网飞
  tiktok: false,       // 国际版抖音
  disney: false,       // 迪士尼
  pixiv: false,        // Pixiv
  hbo: false,          // HBO
  biliintl: false,     // 哔哩哔哩东南亚
  tvb: false,          // TVB
  hulu: false,         // Hulu
  primevideo: false,   // 亚马逊prime video
  telegram: false,     // Telegram通讯软件
  line: false,         // Line通讯软件
  whatsapp: false,     // Whatsapp
  games: false,        // 游戏策略组
  japan: false,        // 日本网站策略组
  tracker: true,       // 网络分析和跟踪服务
  ads: true,           // 常见的网络广告
}

/**
 * 地区配置，通过regex匹配代理节点名称
 * regex会有一定概率误判，自己调整一下吧
 * excludeHighPercentage是排除高倍率节点的开关，只对地区分组有效
 * 倍率大于regions里的ratioLimit值的代理节点会被排除
 */
// ============================ Section 3: 地区分组 ============================
// 通过节点命名匹配地区与倍率限制，自动生成 url-test 组。
const regionOptions = {
  excludeHighPercentage: false,
  regions: [
    {
      name: '香港',
      regex: /港|🇭🇰|hk|hongkong|hong kong/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Hong_Kong.png',
    },
    {
      name: '美国',
      regex: /美|🇺🇸|us|united state|america/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/United_States.png',
    },
    {
      name: '日本',
      regex: /日本|🇯🇵|jp|japan/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Japan.png',
    },
    {
      name: '韩国',
      regex: /韩|🇰🇷|kr|korea/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Korea.png',
    },
    {
      name: '新加坡',
      regex: /新加坡|🇸🇬|sg|singapore/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Singapore.png',
    },
    {
      name: '中国大陆',
      regex: /中国|🇨🇳|cn|china/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/China_Map.png',
    },
    {
      name: '台湾省',
      regex: /台湾|🇹🇼|tw|taiwan|tai wan/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/China.png',
    },
    {
      name: '英国',
      regex: /英|🇬🇧|uk|united kingdom|great britain/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/United_Kingdom.png',
    },
    {
      name: '德国',
      regex: /德国|🇩🇪|de|germany/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Germany.png',
    },
    {
      name: '马来西亚',
      regex: /马来|🇲🇾|my|malaysia/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Malaysia.png',
    },
    {
      name: '土耳其',
      regex: /土耳其|🇹🇷|tr|turkey/i,
      ratioLimit: 2,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Turkey.png',
    },
  ],
}

/**
 * 其实两组DNS就够了，一组国内，一组国外
 * defaultDNS是用来解析DNS的，必须为IP
 * DNS最好不要超过两个，从业界某知名APP的文档里学的
 */
// ============================== Section 4: DNS ===============================
// 默认国外上游为主，对国内域名回流到国内 DNS。保持简洁、稳定。
const defaultDNS = ['tls://223.5.5.5']

const chinaDNS = ['119.29.29.29', '223.5.5.5']

const foreignDNS = ['https://120.53.53.53/dns-query', 'https://223.5.5.5/dns-query']

/**
 * DNS相关配置
 */
const dnsConfig = {
  enable: true,
  listen: ':1053',
  ipv6: true,
  'prefer-h3': true,
  'use-hosts': true,
  'use-system-hosts': true,
  'respect-rules': true,
  'enhanced-mode': 'fake-ip',
  'fake-ip-range': '198.18.0.1/16',
  'fake-ip-filter': ['*', '+.lan', '+.local', '+.market.xiaomi.com'],
  // 'default-nameserver': [...defaultDNS],
  nameserver: [...foreignDNS],
  'proxy-server-nameserver': [...foreignDNS],
  /**
   * 这里对域名解析进行分流
   * 由于默认dns是国外的了，只需要把国内ip和域名分流到国内dns
   */
  'nameserver-policy': {
    'geosite:private': 'system',
    'geosite:cn,steam@cn,category-games@cn,microsoft@cn,apple@cn': chinaDNS,
  },
}

// 可选：扩展更多国内域名的 DNS 分流（默认关闭以保持“最小可用”）
const extendChinaDnsPolicy = true
const extraChinaPolicy = {
  // 示例：常见国内媒体类（按需开启）
  // 'geosite:category-media@cn': chinaDNS,
}
if (extendChinaDnsPolicy) {
  dnsConfig['nameserver-policy'] = {
    ...dnsConfig['nameserver-policy'],
    ...extraChinaPolicy,
  }
}

// ======================== Section 5: 通用与基础配置 =========================
// 规则集通用配置
const ruleProviderCommon = {
  type: 'http',
  format: 'yaml',
  interval: 86400,
}

// 代理组通用配置
const groupBaseOption = {
  interval: 300,
  timeout: 3000,
  url: 'http://cp.cloudflare.com/generate_204',
  lazy: true,
  'max-failed-times': 3,
  hidden: false,
}

// 倍率提取规则可配置，便于适配不同机场命名约定
const multiplierRegex = /(?<=[xX✕✖⨉倍率])([1-9]+(\.\d+)*|0{1}\.\d+)(?=[xX✕✖⨉倍率])*/i

// 工具：去重（保持顺序）
function uniqueList(list) {
  const seen = new Set()
  const result = []
  for (const item of list) {
    if (item == null) continue
    if (!seen.has(item)) {
      seen.add(item)
      result.push(item)
    }
  }
  return result
}

// 工具：根据超时动态给出 url-test 容差，降低抖动时的频繁切换
function getTolerance() {
  const baseTimeout = Number(groupBaseOption?.timeout ?? 3000)
  const candidate = Math.floor(baseTimeout / 30) // 3000ms -> 100
  return Math.max(50, Math.min(200, candidate))
}

// 统一管理服务元数据（探测 URL 与图标），便于后续维护
const serviceMeta = {
  '默认节点':   { icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Proxy.png' },
  '国外AI':     { url: 'https://chat.openai.com/cdn-cgi/trace', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/ChatGPT.png' },
  YouTube:      { url: 'https://www.youtube.com/s/desktop/494dd881/img/favicon.ico', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/YouTube.png' },
  '哔哩哔哩东南亚': { url: 'https://www.bilibili.tv/', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/bilibili_3.png' },
  巴哈姆特:     { url: 'https://ani.gamer.com.tw/ajax/getdeviceid.php', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Bahamut.png' },
  'Disney+':    { url: 'https://disney.api.edge.bamgrid.com/devices', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Disney+.png' },
  NETFLIX:      { url: 'https://api.fast.com/netflix/speedtest/v2?https=true', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Netflix.png' },
  Tiktok:       { url: 'https://www.tiktok.com/', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/TikTok.png' },
  Spotify:      { url: 'http://spclient.wg.spotify.com/signup/public/v1/account', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Spotify.png' },
  Pixiv:        { url: 'https://www.pixiv.net/favicon.ico', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Pixiv.png' },
  HBO:          { url: 'https://www.hbo.com/favicon.ico', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/HBO.png' },
  TVB:          { url: 'https://www.tvb.com/logo_b.svg', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/TVB.png' },
  'Prime Video':{ url: 'https://m.media-amazon.com/images/G/01/digital/video/web/logo-min-remaster.png', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Prime_Video.png' },
  Hulu:         { url: 'https://auth.hulu.com/v4/web/password/authenticate', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Hulu.png' },
  Telegram:     { url: 'http://www.telegram.org/img/website_icon.svg', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Telegram.png' },
  WhatsApp:     { url: 'https://web.whatsapp.com/data/manifest.json', icon: 'https://static.whatsapp.net/rsrc.php/v3/yP/r/rYZqPCBaG70.png' },
  Line:         { url: 'https://line.me/page-data/app-data.json', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Line.png' },
  游戏专用:     { icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Game.png' },
  跟踪分析:     { icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Reject.png' },
  广告过滤:     { icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Advertising.png' },
  苹果服务:     { url: 'http://www.apple.com/library/test/success.html', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Apple_2.png' },
  谷歌服务:     { url: 'http://www.google.com/generate_204', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Google_Search.png' },
  微软服务:     { url: 'http://www.msftconnecttest.com/connecttest.txt', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Microsoft.png' },
  Github:       { url: 'https://github.com/robots.txt', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/GitHub.png' },
  日本网站:     { url: 'https://r.r10s.jp/com/img/home/logo/touch.png', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/JP.png' },
  其他外网:     { icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Streaming!CN.png' },
  国内网站:     { url: 'http://wifi.vivo.com.cn/generate_204', icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/StreamingCN.png' },
  下载软件:     { icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/Download.png' },
}

const ruleProviders = new Map()
ruleProviders.set('applications', {
  ...ruleProviderCommon,
  behavior: 'classical',
  format: 'text',
  url: 'https://fastly.jsdelivr.net/gh/DustinWin/ruleset_geodata@clash-ruleset/applications.list',
  path: './ruleset/DustinWin/applications.list',
})

// ====================== Section 6: 初始规则（基础） =======================
// 固定基础规则，后续会按 ruleOptions 动态追加。
const rules = [
  'RULE-SET,applications,下载软件',
  'PROCESS-NAME,SunloginClient,DIRECT',
  'PROCESS-NAME,SunloginClient.exe,DIRECT',
  // 网盘直连规则
  'DOMAIN-SUFFIX,baidupcs.com,DIRECT',
  'DOMAIN-SUFFIX,pcs.baidu.com,DIRECT',
  'DOMAIN-SUFFIX,pan.baidu.com,DIRECT',
  'DOMAIN-SUFFIX,pan.quark.cn,DIRECT',
]

// 程序入口
/**
 * 入口：覆写与扩展配置
 *
 * 流程：
 * 1) 基础参数覆盖（模式、DNS、profile、性能、sniffer、ntp、geodata）
 * 2) 地区分组生成（正则 + 倍率过滤 + url-test 容差）
 * 3) 通用策略组（默认、国内、外网、下载）
 * 4) 场景策略组（按 ruleOptions 条件追加）
 * 5) 规则列表与规则提供者收敛
 *
 * @param {object} config 输入的原始配置对象
 * @returns {object} 处理后的配置
 */
function main(config) {
  const proxyCount = config?.proxies?.length ?? 0
  const proxyProviderCount =
    typeof config?.['proxy-providers'] === 'object'
      ? Object.keys(config['proxy-providers']).length
      : 0
  if (proxyCount === 0 && proxyProviderCount === 0) {
    throw new Error('配置文件中未找到任何代理')
  }

  let regionProxyGroups = []
  let otherProxyGroups = (config?.proxies ?? []).map((b) => {
    return b.name
  })

  // ---- 基础参数覆盖 ----
  config['allow-lan'] = true

  config['bind-address'] = '*'

  config['mode'] = 'rule'

  // 覆盖原配置中DNS配置
  config['dns'] = dnsConfig

  config['profile'] = {
    'store-selected': true,
    'store-fake-ip': true,
  }

  config['unified-delay'] = true

  config['tcp-concurrent'] = true

  /**
   * 这个值设置大点能省电，笔记本和手机需要关注一下
   */
  config['keep-alive-interval'] = 1800

  config['find-process-mode'] = 'strict'

  config['geodata-mode'] = true

  /**
   * 适合小内存环境，如果在旁路由里运行可以改成standard
   */
  config['geodata-loader'] = 'memconservative'

  config['geo-auto-update'] = true

  config['geo-update-interval'] = 24
  config['sniffer'] = {
    enable: true,
    'force-dns-mapping': true,
    'parse-pure-ip': true,
    'override-destination': false,
    sniff: {
      TLS: { ports: [443, 8443] },
      HTTP: { ports: [80, '8080-8880'] },
      QUIC: { ports: [443, 8443] },
    },
    'force-domain': [],
    'skip-domain': ['Mijia Cloud', '+.oray.com'],
  }
  config['ntp'] = {
    enable: true,
    'write-to-system': false,
    server: 'cn.ntp.org.cn',
  }

  config['geox-url'] = {
    geoip:
      'https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat',
    geosite:
      'https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat',
    mmdb: 'https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country-lite.mmdb',
    asn: 'https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb',
  }

  /**
   * 总开关关闭时不处理策略组
   */
  if (!enable) {
    return config
  }

  // ---- 地区分组生成（正则 + 倍率过滤 + 容差） ----
  regionOptions.regions.forEach((region) => {
    /**
     * 提取倍率符合要求的代理节点
     * 判断倍率有问题的话，大概率是这个正则的问题，可以自行修改
     * 自己改正则的话记得必须把倍率的number值提取出来
     */
    let proxies = config.proxies
      .filter((a) => {
        const multiplier = multiplierRegex.exec(a.name)?.[1]
        return (
          a.name.match(region.regex) &&
          parseFloat(multiplier || '0') <= region.ratioLimit
        )
      })
      .map((b) => {
        return b.name
      })

    /**
     * 必须再判断一下有没有符合要求的代理节点
     * 没有的话，这个策略组就不应该存在
     * 我喜欢自动选择延迟最低的节点，喜欢轮询的可以自己修改
     */
    if (proxies.length > 0) {
      regionProxyGroups.push({
        ...groupBaseOption,
        name: region.name,
        type: 'url-test',
        tolerance: getTolerance(),
        icon: region.icon,
        proxies: proxies,
      })
    }

    otherProxyGroups = otherProxyGroups.filter((x) => !proxies.includes(x))
  })

  const proxyGroupsRegionNames = regionProxyGroups.map((value) => {
    return value.name
  })

  if (otherProxyGroups.length > 0) {
    proxyGroupsRegionNames.push('其他节点')
  }

  // ---- 通用策略组（默认） ----
config['proxy-groups'] = [
  {
    ...groupBaseOption,
    name: '默认节点',
    type: 'select',
    proxies: uniqueList(['香港', ...proxyGroupsRegionNames, '直连']),
    icon: serviceMeta['默认节点'].icon,
  },
  {
    ...groupBaseOption,
    name: '自动测速',
    type: 'url-test',
    proxies: uniqueList(proxyGroupsRegionNames), // 只测速地区节点
    url: 'http://www.gstatic.com/generate_204',
    interval: 300,
    tolerance: 50,
    icon: 'https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Speedtest.png', // 测速仪图标
  },
]


  config.proxies = config?.proxies || []
  if (!config.proxies.find((p) => p?.name === '直连')) {
    config.proxies.push({
      name: '直连',
      type: 'direct',
      udp: true,
    })
  }

  // ---- 场景策略组（按需追加） ----
  if (ruleOptions.openai) {
    /**
     * 国外 AI 场景
     * - 目标：将常见 AI 域名分流至“国外AI”策略组，并引入扩展规则集
     * - 设计：先添加少量显式域名，再挂载外部规则集，保持“最小可用”默认
     * - 顺序：自定义域名 > 外部规则集；命中后不再继续匹配
     */
    rules.push(
      // 显式域名（示例：IDE/插件增强服务）
      'DOMAIN-SUFFIX,grazie.ai,国外AI',
      'DOMAIN-SUFFIX,grazie.aws.intellij.net,国外AI',
      // 外部规则集：覆盖更广的 AI 域名清单（持续更新）
      'RULE-SET,ai,国外AI',
    )
    ruleProviders.set('ai', {
      ...ruleProviderCommon,
      behavior: 'classical',
      format: 'text',
      url: 'https://github.com/dahaha-365/YaNet/raw/refs/heads/dist/rulesets/mihomo/ai.list',
      path: './ruleset/YaNet/ai.list',
    })
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '国外AI',
      type: 'select',
      proxies: uniqueList(['美国', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['国外AI'].url,
      icon: serviceMeta['国外AI'].icon,
    })
  }

  if (ruleOptions.google) {
    rules.push('GEOSITE,google,谷歌服务')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '谷歌服务',
      type: 'select',
      proxies: uniqueList(['美国', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['谷歌服务'].url,
      icon: serviceMeta['谷歌服务'].icon,
    })
  }

  if (ruleOptions.github) {
    rules.push('GEOSITE,github,Github')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Github',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Github'].url,
      icon: serviceMeta['Github'].icon,
    })
  }

  if (ruleOptions.apple) {
    rules.push('GEOSITE,apple-cn,苹果服务')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '苹果服务',
      type: 'select',
      proxies: uniqueList(['直连', '默认节点', ...proxyGroupsRegionNames]),
      url: serviceMeta['苹果服务'].url,
      icon: serviceMeta['苹果服务'].icon,
    })
  }

  if (ruleOptions.microsoft) {
    rules.push('GEOSITE,microsoft@cn,国内网站', 'GEOSITE,microsoft,微软服务')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '微软服务',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['微软服务'].url,
      icon: serviceMeta['微软服务'].icon,
    })
  }

  if (ruleOptions.youtube) {
    rules.push('GEOSITE,youtube,YouTube')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'YouTube',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['YouTube'].url,
      icon: serviceMeta['YouTube'].icon,
    })
  }

  if (ruleOptions.biliintl) {
    rules.push('GEOSITE,biliintl,哔哩哔哩东南亚')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '哔哩哔哩东南亚',
      type: 'select',
      proxies: uniqueList(['默认节点', '直连', ...proxyGroupsRegionNames]),
      url: serviceMeta['哔哩哔哩东南亚'].url,
      icon: serviceMeta['哔哩哔哩东南亚'].icon,
    })
  }

  if (ruleOptions.bahamut) {
    rules.push('GEOSITE,bahamut,巴哈姆特')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '巴哈姆特',
      type: 'select',
      proxies: uniqueList(['默认节点', '直连', ...proxyGroupsRegionNames]),
      url: serviceMeta['巴哈姆特'].url,
      icon: serviceMeta['巴哈姆特'].icon,
    })
  }

  if (ruleOptions.disney) {
    rules.push('GEOSITE,disney,Disney+')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Disney+',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Disney+'].url,
      icon: serviceMeta['Disney+'].icon,
    })
  }

  if (ruleOptions.netflix) {
    rules.push('GEOSITE,netflix,NETFLIX')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'NETFLIX',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['NETFLIX'].url,
      icon: serviceMeta['NETFLIX'].icon,
    })
  }

  if (ruleOptions.tiktok) {
    rules.push('GEOSITE,tiktok,Tiktok')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Tiktok',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Tiktok'].url,
      icon: serviceMeta['Tiktok'].icon,
    })
  }

  if (ruleOptions.spotify) {
    rules.push('GEOSITE,spotify,Spotify')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Spotify',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Spotify'].url,
      icon: serviceMeta['Spotify'].icon,
    })
  }

  if (ruleOptions.pixiv) {
    rules.push('GEOSITE,pixiv,Pixiv')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Pixiv',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Pixiv'].url,
      icon: serviceMeta['Pixiv'].icon,
    })
  }

  if (ruleOptions.hbo) {
    rules.push('GEOSITE,hbo,HBO')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'HBO',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['HBO'].url,
      icon: serviceMeta['HBO'].icon,
    })
  }

  if (ruleOptions.tvb) {
    rules.push('GEOSITE,tvb,TVB')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'TVB',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['TVB'].url,
      icon: serviceMeta['TVB'].icon,
    })
  }

  if (ruleOptions.primevideo) {
    rules.push('GEOSITE,primevideo,Prime Video')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Prime Video',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Prime Video'].url,
      icon: serviceMeta['Prime Video'].icon,
    })
  }

  if (ruleOptions.hulu) {
    rules.push('GEOSITE,hulu,Hulu')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Hulu',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Hulu'].url,
      icon: serviceMeta['Hulu'].icon,
    })
  }

  if (ruleOptions.telegram) {
    rules.push('GEOIP,telegram,Telegram')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Telegram',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Telegram'].url,
      icon: serviceMeta['Telegram'].icon,
    })
  }

  if (ruleOptions.whatsapp) {
    rules.push('GEOSITE,whatsapp,WhatsApp')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'WhatsApp',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['WhatsApp'].url,
      icon: serviceMeta['WhatsApp'].icon,
    })
  }

  if (ruleOptions.line) {
    rules.push('GEOSITE,line,Line')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: 'Line',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['Line'].url,
      icon: serviceMeta['Line'].icon,
    })
  }

  if (ruleOptions.games) {
    rules.push(
      'GEOSITE,category-games@cn,国内网站',
      'GEOSITE,category-games,游戏专用'
    )
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '游戏专用',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      icon: serviceMeta['游戏专用'].icon,
    })
  }

  if (ruleOptions.tracker) {
    rules.push('GEOSITE,tracker,跟踪分析')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '跟踪分析',
      type: 'select',
      proxies: uniqueList(['REJECT', '直连', '默认节点']),
      icon: serviceMeta['跟踪分析'].icon,
    })
  }

  if (ruleOptions.ads) {
    rules.push('GEOSITE,category-ads-all,广告过滤')
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '广告过滤',
      type: 'select',
      proxies: uniqueList(['REJECT', '直连', '默认节点']),
      icon: serviceMeta['广告过滤'].icon,
    })
  }

  if (ruleOptions.japan) {
    rules.push(
      'RULE-SET,category-bank-jp,日本网站',
      'GEOIP,jp,日本网站,no-resolve'
    )
    ruleProviders.set('category-bank-jp', {
      ...ruleProviderCommon,
      behavior: 'domain',
      format: 'mrs',
      url: 'https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/category-bank-jp.mrs',
      path: './ruleset/MetaCubeX/category-bank-jp.mrs',
    })
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '日本网站',
      type: 'select',
      proxies: uniqueList(['默认节点', ...proxyGroupsRegionNames, '直连']),
      url: serviceMeta['日本网站'].url,
      icon: serviceMeta['日本网站'].icon,
    })
  }

  // ---- 规则收敛与兜底 ----
  rules.push(
    'GEOSITE,private,DIRECT',
    'GEOIP,private,DIRECT,no-resolve',
    'GEOSITE,cn,国内网站',
    'GEOIP,cn,国内网站,no-resolve',
    'MATCH,其他外网'
  )
  config['proxy-groups'].push(
    {
      ...groupBaseOption,
      name: '下载软件',
      type: 'select',
      proxies: uniqueList(['直连', 'REJECT', '默认节点', '国内网站', ...proxyGroupsRegionNames]),
      icon: serviceMeta['下载软件'].icon,
    },
    {
      ...groupBaseOption,
      name: '其他外网',
      type: 'select',
      proxies: uniqueList(['默认节点', '国内网站', ...proxyGroupsRegionNames]),
      icon: serviceMeta['其他外网'].icon,
    },
    {
      ...groupBaseOption,
      name: '国内网站',
      type: 'select',
      proxies: uniqueList(['直连', '默认节点', ...proxyGroupsRegionNames]),
      url: serviceMeta['国内网站'].url,
      icon: serviceMeta['国内网站'].icon,
    }
  )

  // ---- 汇总策略组与规则提供者 ----
  config['proxy-groups'] = config['proxy-groups'].concat(regionProxyGroups)

  // 覆盖原配置中的规则
  config['rules'] = rules
  config['rule-providers'] = Object.fromEntries(ruleProviders)

  // ---- 其他节点（剩余） ----
  if (otherProxyGroups.length > 0) {
    config['proxy-groups'].push({
      ...groupBaseOption,
      name: '其他节点',
      type: 'select',
      proxies: otherProxyGroups,
      icon: 'https://fastly.jsdelivr.net/gh/Koolson/Qure/IconSet/Color/World_Map.png',
    })
  }
// ---- 展示顺序统一整理（仅影响 UI 显示顺序，不改功能） ----
(function reorderProxyGroups() {
  const order = [
    // 顶部常用
    '默认节点', '自动测速',

    // 业务/场景（按你常用的先后放想要优先显示的名字）
    '国外AI', '谷歌服务', '微软服务', '苹果服务', 'Github',
    'YouTube', 'NETFLIX', 'Disney+', 'Tiktok', 'Spotify', 'Pixiv', 'HBO', 'TVB', 'Prime Video', 'Hulu',
    '日本网站', 'Telegram', 'WhatsApp', 'Line', '游戏专用',

    // 系统类
    '国内网站', '其他外网', '下载软件',

    // 其他
    '其他节点',

    // 置底拦截类
    '跟踪分析', '广告过滤',
  ];

  // 地区组统一归类到“系统类”之后、“拦截类”之前
  const regionNameRegex = /(香港|美国|日本|韩国|新加坡|中国大陆|台湾省|英国|德国|马来西亚|土耳其)/;

  const anchorIdx = order.indexOf('下载软件'); // 地区组显示锚点（在其后）
  const tailStartIdx = order.indexOf('跟踪分析'); // 拦截类开始位置

  const rank = (name) => {
    const fixed = order.indexOf(name);
    if (fixed !== -1) return fixed;

    // 地区组统一插在系统类后
    if (regionNameRegex.test(name)) return anchorIdx + 1;

    // 其它未指定的策略组，默认放在“拦截类”前一档
    return (tailStartIdx === -1 ? order.length : tailStartIdx) - 1;
  };

  if (Array.isArray(config['proxy-groups'])) {
    config['proxy-groups'].sort((a, b) => rank(a.name) - rank(b.name));
  }
})();


  // 返回修改后的配置
  return config
}